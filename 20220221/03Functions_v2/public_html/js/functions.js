/* 
    Created on : May, 2019 
    Author     : Liisa Auer, Oulu University of Applied Sciences
    License    : CC-BY-4.0
*/

let whatShape = 1;
/**
 * What is selected, circle or square?
 * @param {number} i    1 = circle, 2 = square
 */
function shape(i) {
    whatShape = i;
    document.getElementById('result').innerHTML = "";
}

/**
 * Print result on the page
 * @param {element} place   where to print
 * @param {string} shape    shape as text
 * @param {number} area     area of the shape
 * @param {number} around   around of the shape
 */
function print(place, shape, area, around) {
    place.innerHTML = shape + " area is " + area + ", around is " + around + ".";
}

/**
 * Calculate circle around
 * @param {number} r    radius of a circle
 * @returns {number}    around of a circle
 */
function calculateCircleAround (r) {
    
}

/**
 * Calculate circle area
 * @param {number} r    radius of a circle
 * @returns {number}    area of a circle 
 */
function calculateCircleArea (r) {
    
}

// Write Square functions here


// Paste here the random number generator function 


// Button functions
/*
F1: Circle - function f01()
Lue s√§de (radius) input-elementist√§ (radius1). Laske ympyr√§n pinta-ala ja piiri. Tulosta tulokset
elementteihin c_around ja c_area. Py√∂rist√§ tulokset kokonaisluvuiksi tulostettaessa.
Ympyr√§n piiri lasketaan: 2 * PI * radius, Pin arvon saat Math-luokasta komennolla Math.PI.
Ympyr√§n pinta-ala lasketaan: PI * radius2. Potenssiin korottaminen tehd√§√§n Math-luokan
funktiolla Math.pow(number, power). Aseta sopiva muuttuja number-muuttujan paikalle (siis s√§de) ja power-muuttujan paika
*/
function f01() {           
    // Lue s√§de (radius) input-elementist√§ (radius1).
    let radius = Number(document.getElementById("radius1").value);

    // Ympyr√§n piiri lasketaan: 2 * PI * radius, Pin arvon saat Math-luokasta komennolla Math.PI.
    let circleAround = 2 * Math.PI * radius;

    // Tulosta tulokset elementteihin c_around 
    document.getElementById("c_around").innerHTML = circleAround;
    // ja c_area. 

}

/*
F2: Tasakylkinen kolmio (kolmiossa on kaksi samanpituista kylke√§) - function f02()
Laske ja tulosta tasakylkisen kolmion korkeus, pinta-ala ja ymp√§rys, kun sivun ja kannan pituus on
tunnettu.
Tasakylkisess√§ kolmiossa sivut ovat yht√§ pitk√§t. Kylki kuvassa on merkitty
c:ll√§. b on kolmion korkeus ja kannan pituus on 2*a.
Mik√§li tiedet√§√§n kolmion kanta, niin a:n pituus saadaan kanta/2.
Jos tiedet√§√§n a ja b, niin c saadaan Pythagoraan lauseesta ùëê = ‚àöùëé
2 + ùëè
2
T√§ss√§ teht√§v√§ss√§ pit√§√§ ratkaista muuttuja b, joka lasketaan ùëè = ‚àöùëê
2 ‚àí ùëé
2
Kun tiedet√§√§n suorakulmaisen kolmion kanta ja korkeus, niin voidaan laskea
pinta-ala kaavalla, pinta-ala = (kanta * korkeus)/2
Py√∂rist√§ tulokset kokonaisluvuksi tulostettaessa.
*/
function f02() {

}

/*
F3: Circle 2 - function f03()
Etsi JavaScript-tiedostosta funktioiden calculateCircleAround ja calculateCircleArea rungot. Kirjoita
funktioihin lauseet, joilla lasketaa ympyr√§n piiri sek√§ pinta-ala parametrin r avulla ja palauta
laskutoimitusten tulos kutsuvalle.
Lue funktiossa f03 ympyr√§n s√§de ja laske piiri sek√§ pinta-ala juuri kirjoittamiesi funktioiden avulla.
Etsi JavaScript-tiedostosta funktio print. K√§yt√§ sit√§ tulostamisessa. Py√∂rist√§ tulokset kokonaisluvuksi
tulostamisen yhteydess√§. √Ñl√§ muuta print-funktiota. 
*/
function f03() {

//    how to find the element where to print and use it    
//    let p = document.getElementById('circle');
//    print(p, ...);    
}

/*
F4: Square - function f04()
M√§√§rittele funktiot calculateSquareAround(s) ja calculateSquareArea(s). Kirjoita funktioihin lauseet,
joilla lasketaan neli√∂n pinta-ala ja piiri perustuen parametrin s sis√§lt√∂√∂n.
Lue neli√∂n sivun pituus ja laske pinta-ala sek√§ piiri juuri kirjoittamiesi funktioiden avulla.
K√§yt√§ funktiota print tulostamisessa. Ei ole tarvetta py√∂rist√§√§ tulostettavia arvoja.
*/
function f04() {
    
}

/*
F5: Circle or Square - function f05()
Etsi funktio shape(i) JavaScript-tiedostosta. Huomaa globaalimuuttuja whatShape. Tutki, miten
funktiota kutsutaan html-tiedostosta. Selvit√§ itsellesi, mit√§ tarkoittaa, kun muuttujalla whatShape on
arvo 1 tai 2.
Lue data radius/circle. Perustuen whatShape-muuttujan arvoon laske joko ympyr√§n tai neli√∂n
tulokset. K√§yt√§ funktiota print tulostamisessa. Ympyr√§n tulokset py√∂ristet√§√§n kokonaisluvuksi, neli√∂n
ei.
*/
function f05() {

}
/*
F6: Dice - function f06()
Perehdy funktioon Math.random()w3schools-sivustolla
https://www.w3schools.com/js/js_random.asp.
Monissa harjoituksissa sinun tulee arpoa luku halutulta lukuv√§lilt√§. Kopioi-ja-liit√§ satunnaisluvun
arpova funktio w3schoos-sivustolta. Kopioi funktio, joka arpoo satunnaisluvun halutulta
arvoalueelta siten, ett√§ parametreina annetaan arvoalueen yl√§- ja alaraja (molemmat voivat tulla
arvotuksi). Etsi funktiot.js-tiedostosta paikka, johon satunnaisluvun arvontafunktion kirjoitat.
L√∂yd√§t paikan lukemalla kommenttitekstej√§.
K√§yt√§ funktiota simuloimaan nopan (dice) heitt√§mist√§. Nopassa on silm√§luvut 1 ‚Ä¶ 6. Tulosta saatu
silm√§luku html-sivulle.
*/
function f06() {

}

/*
F7: Random numbers - function f07()
Ohjelmoi funktioon satunnaislukujen arpominen k√§ytt√§j√§n ilmoittamalta arvoalueelta (min ja max).
K√§yt√§ edellisess√§ teht√§v√§ss√§ kirjoittamaasi funktiota. Tulosta kukin satunnaisluku elementtiin
randoms. Luvut erotetaan toisistaan v√§lily√∂nnill√§ ‚Äù ‚Äù, kts. esimerkkitulostus.
*/
function f07() {

}

/* 
F8: User id - function f08()
Lue henkil√∂n etu- ja sukunimi sek√§ muodosta niiden perusteella k√§ytt√§j√§tunnus ja salasana, kts.
esimerkkitulostus. T√§ss√§ teht√§v√§ss√§ k√§ytett√§v√§√§ salasanan muodostamista ei oikeissa sovelluksissa
pid√§ k√§ytt√§√§.
K√§ytt√§j√§tunnus: 'n' + kuluvan vuoden viimeinen numero + etunimen kaksi ensimm√§ist√§ kirjainta
pienin√§ kirjaimina + sukunimen kaksi ensimm√§ist√§ kirjainta pienin√§ kirjaimina + '00'
Salasana: '!?' + etunimen ensimm√§inen kirjain pienen√§ kirjaimena + etunimen viimeinen kirjain isona
kirjaimena + sukunimen ensimm√§inen kirjain pienen√§ kirjaimena + sukunimen viimeinen kirjain isona
kirjaimena + sukunimen toiseksi viimeinen kirjain isona kirjaimena + '+/' + kuluvan vuoden viimeinen
numero + 1
Muodosta k√§sin k√§ytt√§j√§tunnus ja salasana omaan nimesi perustuen. Kirjoita se kommenttina
funktioon.
Aluksi kirjoitat muutaman funktion. Katso kalvot ja videot saadaksesi vihjeit√§ kirjoittamiseen. N√§m√§
funktiot kirjoitetaan funktion f08 yl√§puolelle.
Kirjoita funktio function getCharacter(text, index, uppercase) { ‚Ä¶ } Funktiossa otat
indeksin osoittaman kirjaimen text-muuttujasta. Mik√§li uppercase-muttuujassa on arvo true >>
kirjain muutetaan isoksi kirjaimeksi, muutoin pieneksi kirjaimeksi. Kirjain palautetaan kutsuvalle.
Kirjoita funktio function getDigit() { ‚Ä¶ } Funktiossa luetaan ensin kuluva p√§iv√§ys, otetaan
siit√§ vuosiluku, muutetaan vuosiluku merkkijonoksi ja lopuksi otetaan viimeinen merkki, joka
palautetaan kutsuvalle.
Tarvitset funktioissa seuraavia valmiita JavaScript-funktioita:
- muuttuja.charAt(index), https://www.w3schools.com/jsref/jsref_charat.asp.
Huomaa. Merkkijonon ensimm√§isen merkin indeksi on nolla.
- charAt()-funktion sijaan voit k√§ytt√§√§ my√∂s taulukkomerkint√§√§ muuttuja[index]
- isoksi kirjaimeksi muunnos tehd√§√§n funktiolla muuttuja.toUpperCase()
https://www.w3schools.com/jsref/jsref_touppercase.asp
- pieneksi kirjaimeksi muunnos tehd√§√§n funktiolla muuttuja.toLowerCase()
https://www.w3schools.com/jsref/jsref_tolowercase.asp
- numeerinen tieto muunnetaan merkkitiedoksi funktiolla muuttuja.toString()
https://www.w3schools.com/jsref/jsref_tostring_number.asp
T√§m√§n j√§lkeen voit aloittaa k√§ytt√§j√§tunnuksen ja salasanan muodostamista.
Kirjoita ohjelmakoodi k√§ytt√§j√§tunnuksen muodostamiseksi:
- k√§yt√§ funktiota getCharacter saadaksesi tarvittavat kirjaimet, ota jokainen kirjain omaan
muuttujaan, nelj√§ muuttujaa
- k√§yt√§ funktiota getDigit saadaksesi kuluvan vuoden viimeisen numeron muuttujaan
- muodosta k√§ytt√§j√§tunnus teht√§v√§n alussa kerrotun s√§√§nn√∂n mukaisesti ja tulosta se
Oulu University of Applied Sciences JAVASCRIPT 4 (10)
Liisa Auer
Kirjoita ohjelmakoodi salasanan muodostamiseksi:
- viimeisen kirjaimen esillesaamiseksi tarvitset tiedon merkkijonon pituudesta, sen saat lengthominaisuudesta, https://www.w3schools.com/jsref/jsref_length_string.asp
- viimeinen kirjain merkkijonossa on paikassa length - 1, toiseksi viimeinen on paikassa length - 2
- k√§yt√§ funktiota getCharacter ja ota tarvittavat kirjaimet eri muuttujiin
- lis√§√§ yksi kuluvan vuoden viimeiseen numeroon
- muodosta salasana teht√§v√§n alussa kerrotun s√§√§nn√∂n mukaisesti ja tulosta se
*/
// Write getCharacter and getDigit functions here

function f08() {
    // write here the user id and password by hand to have an example of 
    // the desired result of the task, use your own name
    // first name:  
    // last name: 
    // user id: 
    // password: 
    
    
}

/*F9: Check input data f09()
Teht√§v√§ss√§ lasketaan henkil√∂n ik√§ ja onnen numero kirjoitetun p√§iv√§m√§√§r√§n perusteella. Aluksi
kirjoitat kaksi funktiota funktion f09() yl√§puolelle.
Kirjoita funktio function checkDate(day, month, year) { ‚Ä¶ }. Funktiolla tarkistetaan, ett√§
p√§iv√§m√§√§r√§ on oikein. Funktio palauttaa virhetekstin, jos p√§iv√§m√§√§r√§ss√§ on virhe. M√§√§rittele aluksi
funktiossa paikallinen muuttuja message ja sijoita siihen tyhj√§ merkkijono (‚Äù‚Äù).
Sen j√§lkeen tarkistat, ett√§ day-muuttujassa on luku v√§lilt√§ 1-31. Mik√§li n√§in ei ole, niin messageen
sijoitetaan "Day must be 1-31." Seuraavaksi tarkistat, ett√§ month-muuttujassa on luku v√§lilt√§ 1-12.
Mik√§li n√§in ei ole, niin messageen sijoitetaan "Month must be 1-12." Lopuksi tarkistat, ett√§ yearmuuttujassa on luku v√§lilt√§ 1900-kuluva vuosi. Mik√§li n√§in ei ole, niin messageen sijoitetaan " Year
must be between 1900 and current year." Funktion viimeinen teht√§v√§ on palauttaa messagemuuttuja kutsuvalle.
Kirjoita funktio function luckyNumber(day, month, year) { ‚Ä¶ }. Kirjoita ensimm√§iseksi
funktioon vakio, joka sis√§lt√§√§ onnennumerot const LUCKY = "2468013579"; Sen j√§lkeen lasket
yhteen p√§iv√§n, kuukauden ja vuoden. Saatu luku jaetaan luvulla 10 ja otetaan talteen jakoj√§√§nn√∂s.
Jakoj√§√§nn√∂s osoittaa onnennumeroon em. LUCKY-vakiossa. Palauta saatu onnennumero kutsuvalle.
Sitten siirryt√§√§n kirjoittamaan funktiota f09(). Tyhjenn√§ mahdolliset entiset tulosteet (check_error
ja check_result). Lue elementeist√§ dd, mm ja yy data numeerisena. Kutsu funktiota checkDate
ja ota talteen muuttujaan funktion palauttama viesti. Mik√§li saatu viesti ei ole tyhj√§ merkkijono (‚Äù‚Äù),
niin saatu viesti tulostetaan elementtiin check_error ja lopetetaan toiminta.
Kun p√§iv√§m√§√§r√§ on oikein, niin lasketaan ik√§ vuoden perusteella. Sen j√§lkeen kutsutaan funktiota
luckyNumber ja talletetaan muuttujaan funktion palauttama onnennumero.
Lopuksi tulostetaan elementtiin check_result oheinen teksti. Luonnollisesti luvut vaihtelevat
sy√∂tetyn p√§iv√§m√§√§r√§n mukaan. Rivinvaihto <br> on lauseiden v√§liss√§.*/
// Write checkDate and luckyNumber functions here

function f09() {

}
